<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools">
    <data>
        <!-- hover over root tag, click on the lightbulb and  select to data binding layout
        add variable to data tag with name and type using the package and class object
        -->
        <variable name="vm"
                  type="com.example.mvvmtipcalculator.viewmodel.CalculatorViewModel"/>
    </data>
    <android.support.design.widget.CoordinatorLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            tools:context=".MainActivity">

        <android.support.design.widget.AppBarLayout
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:theme="@style/AppTheme.AppBarOverlay">

            <android.support.v7.widget.Toolbar
                    android:id="@+id/toolbar"
                    android:layout_width="match_parent"
                    android:layout_height="?attr/actionBarSize"
                    android:background="?attr/colorPrimary"
                    app:popupTheme="@style/AppTheme.PopupOverlay"/>

        </android.support.design.widget.AppBarLayout>
<!-- set the vm variable of the child layout to the vm variable of this parent layout
     child layout = vm, parent layout = @{vm}
 -->
        <include
                layout="@layout/content_main"
                app:vm="@{vm}"
        />

        <!-- use the data tag in the FloatingAction button

        android:onClick="@{() -> vm.calculateTip()}"
        -the value of my onclick attribute is called a databinding expression
        -data binding expressions like "@{ something }" "the mustache operator"
        -@{ lambda expression () -> vm.calculateTip()}
        - the onClick attribute needs a view.OnClickListener to process the click
        - the calculateTip function has nothing to do with android or its views
        - the lambda expression created invokes in action directly
        -->
        <android.support.design.widget.FloatingActionButton
                android:id="@+id/calculate_fab"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="bottom|end"
                android:layout_margin="@dimen/fab_margin"
                android:onClick="@{() -> vm.calculateTip()}"
                app:srcCompat="@drawable/ic_attach_money_white_24dp"/>

    </android.support.design.widget.CoordinatorLayout>
</layout>